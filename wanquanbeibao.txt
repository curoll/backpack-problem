//二维版本
#include<cstdio>
#include<algorithm>

using namespace std;
const int N=10010;
int a[110];
bool f[110][N];
int n;
int gcd(int a,int b)//a与b最大公约数模板
{
    return b?gcd(b,a%b):a;
}
int main()
{
  scanf("%d",&n);
  int d=0;
  for(int i=1;i<=n;i++)
  {
      scanf("%d",&a[i]);
      d=gcd(d,a[i]);
  }
  if(d!=1)puts("INF");//d=1凑不出得才是有限个
  else 
  {
      f[0][0]=true;
      for(int i=1;i<=n;i++)
        for(int j=0;j<N;j++)
         {
             f[i][j]=f[i-1][j];
             if(j>=a[i]) f[i][j] |= f[i][j-a[i]];
         }
      int res =0;
      for(int i=0;i<N;i++)
         if(!f[n][i])
           res++;
      printf("%d\n",res);
  }
}
//优化后一维版本(完全背包)
#include<cstdio>
#include<algorithm>

using namespace std;
const int N=10010;
int a[110];
bool f[N];
int n;
int gcd(int a,int b)//a与b最大公约数模板
{
    return b?gcd(b,a%b):a;
}
int main()
{
  scanf("%d",&n);
  int d=0;
  for(int i=1;i<=n;i++)
  {
      scanf("%d",&a[i]);
      d=gcd(d,a[i]);
  }
  if(d!=1)puts("INF");//d=1凑不出得才是有限个
  else 
  {
      f[0]=true;
      for(int i=1;i<=n;i++)
        for(int j=a[i];j<N;j++)
         {
             //f[i][j] |= f[i][j-a[i]];这里还是第i层
             f[j] |= f[j-a[i]];
         }
      int res =0;
      for(int i=0;i<N;i++)
         if(!f[i])
           res++;
      printf("%d\n",res);
  }
}